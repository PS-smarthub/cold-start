generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Container {
  id                   String                @id @default(cuid())
  device               String
  setPoint             Float?                @map("set_point")
  inValidation         Boolean               @default(false) @map("in_validation")
  createdAt            DateTime              @default(now())
  temperatures         Temperature[]
  schedulingContainers SchedulingContainer[]
}

model Temperature {
  id              Int       @id @default(autoincrement())
  dateTime        DateTime  @map("date_time")
  roomTemperature Float     @map("room_temperature")
  temperature1    Float     @map("temperature_1")
  temperature2    Float     @map("temperature_2")
  containerId     String    @map("container_id")
  container       Container @relation(fields: [containerId], references: [id])
}

model SchedulingContainer {
  id              String    @id @default(cuid())
  initialDateTime DateTime  @map("initial_date_time")
  endingDateTime  DateTime  @map("ending_date_time")
  userIdPosition1 String    @map("user_id_position_1")
  userIdPosition2 String?   @map("user_id_position_2")
  containerId     String    @map("container_id")
  userName1       String    @map("user_name_1")
  userName2       String?   @map("user_name_2")
  position1       Boolean?  @default(false)
  position2       Boolean?  @default(false)
  container       Container @relation(fields: [containerId], references: [id])
}
